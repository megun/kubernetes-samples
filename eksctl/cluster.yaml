apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: cluster-001
  region: ap-northeast-1
  version: "1.14"

vpc:
  subnets:
    private:
      ap-northeast-1a: { id: subnet-06d3f26671c7e628d }
      ap-northeast-1c: { id: subnet-0b38bc260b1b18ce0 }
      ap-northeast-1d: { id: subnet-05b35cdbd824ca2d0 }
    public:
      ap-northeast-1a: { id: subnet-01129886e137a2282 }
      ap-northeast-1c: { id: subnet-05b8e025aef09d102 }
      ap-northeast-1d: { id: subnet-0637b8b7bfb2a1cc0 }

cloudWatch:
  clusterLogging:
    enableTypes:
      - "api"
      - "audit"
      - "authenticator"
      - "controllerManager"
      - "scheduler"

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: s3-reader
      # if no namespace is set, "default" will be used;
      # the namespace will be created if it doesn't exist already
      namespace: backend-apps
      labels: {aws-usage: "application"}
    attachPolicyARNs:
    - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
  - metadata:
      name: cache-access
      namespace: backend-apps
      labels: {aws-usage: "application"}
    attachPolicyARNs:
    - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
    - "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess"
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        Resource: '*'

nodeGroups:
  - name: ng-1-workers
    labels: { role: workers }
    desiredCapacity: 2
    minSize: 2
    maxSize: 5
    instancesDistribution:
      #maxPrice: 0.017
      instanceTypes: ["t3.large", "t3.medium"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotInstancePools: 2
    privateNetworking: true
    tags:
      tag1: val1
      tag2: val2
  #- name: ng-2-builders
  #  labels: { role: builders }
  #  instanceType: t3.medium
  #  desiredCapacity: 2
  #  privateNetworking: true
  #  iam:
  #    withAddonPolicies:
  #      imageBuilder: true
  #  tags:
  #    tag1: val1
  #    tag2: val2

#managedNodeGroups:
#  - name: managed-ng-1
#    minSize: 2
#    maxSize: 4
#    desiredCapacity: 3
#    volumeSize: 20
#    ssh:
#      allow: true
#      publicKeyPath: ~/.ssh/id_rsa.pub
#      # new feature for restricting SSH access to certain AWS security group IDs
#      sourceSecurityGroupIds: ["sg-059ea2deae09f85e6"]
#    labels: {role: worker}
#    tags:
#      nodegroup-role: worker

#fargateProfiles:
#  - name: fp-default
#    selectors:
#      # All workloads in the "default" Kubernetes namespace will be
#      # scheduled onto Fargate:
#      - namespace: default
#      # All workloads in the "kube-system" Kubernetes namespace will be
#      # scheduled onto Fargate:
#      - namespace: kube-system
#  - name: fp-dev
#    selectors:
#      # All workloads in the "dev" Kubernetes namespace matching the following
#      # label selectors will be scheduled onto Fargate:
#      - namespace: dev
#        labels:
#          env: dev
#          checks: passed